
package GIS.filehandling;

import static GIS.GIS.gis;
import GIS.drawing.Content;
import GIS.geometry.GISPoint;
import GIS.geometry.GISPolygon;
import GIS.geometry.GISPolyline;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Formatter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 * Creates new form (FileHandler), serves as connection between user input and 
 * the file storage classes Database and CSV
 * @author keneuoe
 */
public class FileHandler extends javax.swing.JFrame {

    // Database object to store connection information permanently
    Database db;
    // Content received from GIS.java
    Content c;
    // Content received from DB import
    Content cDB;
    
    /**
     * Creates new form db_connection, serves as connection between user input and 
     * the file storage classes Database and CSV
     */
    public FileHandler() {
        // get the content of GIS.java
        this.c = gis.c;
        initComponents();
        name_txt.setVisible(false);
        path_txt.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        file_viewer = new javax.swing.JTable();
        label1 = new java.awt.Label();
        jSeparator1 = new javax.swing.JSeparator();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        host_textfield = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        user_textfield = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        DBMSName = new javax.swing.JTextField();
        password_textfield = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        port_textfield = new javax.swing.JTextField();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        dbname_textfield = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        Connect = new javax.swing.JButton();
        connected_label = new javax.swing.JLabel();
        table_txt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        clear_viewer_btn = new javax.swing.JButton();
        label4 = new java.awt.Label();
        LoadInGis_DB_btn = new javax.swing.JButton();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        label2 = new java.awt.Label();
        saveToDb_btn = new javax.swing.JButton();
        import_db_btn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        name_txt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        path_txt = new javax.swing.JTextField();
        jLayeredPane5 = new javax.swing.JLayeredPane();
        open_csv_btn = new javax.swing.JButton();
        label3 = new java.awt.Label();
        saveToCsv_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 204));
        setName(""); // NOI18N

        file_viewer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "gid", "type", "geom"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        file_viewer.setGridColor(new java.awt.Color(255, 204, 204));
        jScrollPane2.setViewportView(file_viewer);

        label1.setFont(new java.awt.Font("Elephant", 1, 14)); // NOI18N
        label1.setForeground(new java.awt.Color(0, 0, 153));
        label1.setText("Connection with MySQL");

        host_textfield.setText("localhost");
        host_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                host_textfieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Host");

        jLabel5.setText("Password");

        jLabel4.setText("Username");

        user_textfield.setText("root");
        user_textfield.setMinimumSize(new java.awt.Dimension(10, 109));
        user_textfield.setPreferredSize(new java.awt.Dimension(109, 26));
        user_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user_textfieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Port");

        DBMSName.setText("mysql");
        DBMSName.setPreferredSize(new java.awt.Dimension(109, 26));

        password_textfield.setPreferredSize(new java.awt.Dimension(109, 26));

        jLabel1.setText("DBMS Name");

        port_textfield.setText("3306");
        port_textfield.setPreferredSize(new java.awt.Dimension(109, 26));

        jLayeredPane1.setLayer(host_textfield, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(user_textfield, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(DBMSName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(password_textfield, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(port_textfield, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(port_textfield, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(user_textfield, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(37, 37, 37)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(DBMSName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(host_textfield))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(password_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DBMSName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(host_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(port_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(user_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(password_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dbname_textfield.setText("shapes");
        dbname_textfield.setPreferredSize(new java.awt.Dimension(109, 26));

        jLabel7.setText("Database Name");

        Connect.setText("Connect");
        Connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectActionPerformed(evt);
            }
        });

        connected_label.setText("status show");

        table_txt.setText("shapes");
        table_txt.setEnabled(false);
        table_txt.setPreferredSize(new java.awt.Dimension(109, 26));
        table_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                table_txtActionPerformed(evt);
            }
        });

        jLabel10.setText("Database Table");

        jLayeredPane2.setLayer(dbname_textfield, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(Connect, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(connected_label, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(table_txt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(dbname_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addComponent(connected_label, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Connect))
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(table_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(dbname_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(table_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connected_label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Connect)))
        );

        clear_viewer_btn.setText("Clear Table");
        clear_viewer_btn.setToolTipText("");
        clear_viewer_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_viewer_btnActionPerformed(evt);
            }
        });

        label4.setFont(new java.awt.Font("Elephant", 1, 14)); // NOI18N
        label4.setForeground(new java.awt.Color(0, 0, 153));
        label4.setText("Table : Shapes");

        LoadInGis_DB_btn.setText("Load into GIS");
        LoadInGis_DB_btn.setToolTipText("");
        LoadInGis_DB_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadInGis_DB_btnActionPerformed(evt);
            }
        });

        label2.setFont(new java.awt.Font("Elephant", 1, 14)); // NOI18N
        label2.setForeground(new java.awt.Color(0, 0, 153));
        label2.setText("MySQL  Data Management");

        saveToDb_btn.setText("Save into database");
        saveToDb_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToDb_btnActionPerformed(evt);
            }
        });

        import_db_btn.setText("Import from Database");
        import_db_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_db_btnActionPerformed(evt);
            }
        });

        jLabel8.setText("File");

        jLabel9.setText("Path");

        jLayeredPane4.setLayer(label2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(saveToDb_btn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(import_db_btn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(name_txt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(path_txt, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane4Layout = new javax.swing.GroupLayout(jLayeredPane4);
        jLayeredPane4.setLayout(jLayeredPane4Layout);
        jLayeredPane4Layout.setHorizontalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLayeredPane4Layout.createSequentialGroup()
                        .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveToDb_btn)
                            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(import_db_btn)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane4Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(path_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane4Layout.setVerticalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveToDb_btn)
                    .addComponent(import_db_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(path_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        open_csv_btn.setText("Import from CSV");
        open_csv_btn.setToolTipText("");
        open_csv_btn.setFocusable(false);
        open_csv_btn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        open_csv_btn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        open_csv_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_csv_btnActionPerformed(evt);
            }
        });

        label3.setFont(new java.awt.Font("Elephant", 1, 14)); // NOI18N
        label3.setForeground(new java.awt.Color(0, 0, 153));
        label3.setText("CSV  File  Handeling");

        saveToCsv_btn.setText("Save to CSV");
        saveToCsv_btn.setFocusable(false);
        saveToCsv_btn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveToCsv_btn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveToCsv_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToCsv_btnActionPerformed(evt);
            }
        });

        jLayeredPane5.setLayer(open_csv_btn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(label3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(saveToCsv_btn, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane5Layout = new javax.swing.GroupLayout(jLayeredPane5);
        jLayeredPane5.setLayout(jLayeredPane5Layout);
        jLayeredPane5Layout.setHorizontalGroup(
            jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLayeredPane5Layout.createSequentialGroup()
                        .addComponent(saveToCsv_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(open_csv_btn))))
        );
        jLayeredPane5Layout.setVerticalGroup(
            jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveToCsv_btn)
                    .addComponent(open_csv_btn))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(88, 88, 88)
                            .addComponent(LoadInGis_DB_btn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(clear_viewer_btn)))
                    .addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLayeredPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 2, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(clear_viewer_btn)
                                .addComponent(LoadInGis_DB_btn))
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLayeredPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void user_textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user_textfieldActionPerformed

    private void host_textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_host_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_host_textfieldActionPerformed

    private void saveToDb_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToDb_btnActionPerformed
        try {
            String tableName = table_txt.getText();
            String dbname = dbname_textfield.getText();
            // a table is created if none exists
            createTable();
            // the existing values are deleted first
            deleteAllEntries();
            // the content of the drawing panel are saved into the database table
            db.insertContent(c);
            JOptionPane.showMessageDialog(null, "Saved to \ndatabase: " +dbname +" \ntable: " +tableName);
        } 
        catch (Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_saveToDb_btnActionPerformed
    
    private void saveToCsv_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToCsv_btnActionPerformed
        try {
            String filename = name_txt.getText();
            String filepath = path_txt.getText();
            
            // if a file has already been selected, on button press, the saveToCsv() method is implemented;
            if (!"".equals(filename)){
                saveToCsv();
            }
            
            // if a file has not been preselected, first the fileChooser() method is called, 
            // then the saveToCsv() method is implemented;
            else {
                fileChooser();
                saveToCsv();
            }
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Select file first");
        }
    }//GEN-LAST:event_saveToCsv_btnActionPerformed

    private void import_db_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_db_btnActionPerformed
        try {
            // displays the content of the database table on the JTable
            displayDbData();
        }  
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_import_db_btnActionPerformed

    private void LoadInGis_DB_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadInGis_DB_btnActionPerformed
        try {
            // load content from the DB and store it in the Content object cDB
            cDB = db.loadContent();
            // and overwrite the actual content of the GIS 
            gis.setContent(cDB);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_LoadInGis_DB_btnActionPerformed

    private void open_csv_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_csv_btnActionPerformed
        // opens a file chooser, then displays the data on the JTable
        try {
            fileChooser();
            displayCsvData();
        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_open_csv_btnActionPerformed

    private void clear_viewer_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_viewer_btnActionPerformed
        // clears the file_viewer
        ((DefaultTableModel)file_viewer.getModel()).setNumRows(0);
    }//GEN-LAST:event_clear_viewer_btnActionPerformed

    private void table_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_table_txtActionPerformed
        // sets the content of the text_box to "read-only"
        table_txt.setEditable(false);
    }//GEN-LAST:event_table_txtActionPerformed

    private void ConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectActionPerformed
        try {
            // a connection to the database is established
            getConnection();
            // if successful a status message is displayed
            connected_label.setVisible(true);
            connected_label.setText("connected");
            connected_label.setForeground(Color.green);

        } catch (SQLException ex) {
            // if there is an error, a red status message is displayed
            System.out.println(ex.getSQLState());
            connected_label.setVisible(true);
            connected_label.setText("connection error");
            connected_label.setForeground(Color.red);
        }
    }//GEN-LAST:event_ConnectActionPerformed

    /**
     * called when import from Import from Database button is pressed
     * this methods displays the contents of a database table into the JTable
     * @throws SQLException -
     */
    
    public void displayDbData() throws SQLException {
            try {
                String table = table_txt.getText();
                Connection con = getConnection();
                java.sql.ResultSet resultSet;
                PreparedStatement display;
               
                display = con.prepareStatement("SELECT * FROM " +table);
                
                resultSet = display.executeQuery();

                file_viewer.setModel(DbUtils.resultSetToTableModel(resultSet));
                
                resultSet.close();
                display.close();
            }
            
            catch(SQLException e){
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
    }

    /**
     * called when Import from CSV botton is pressed
     * this methods displays the contents of a CSV file into the JTable
     * @throws Exception -
     */
    public void displayCsvData() throws Exception {
        String filepath  = path_txt.getText();
        CSV csv = new CSV(filepath);               
        // load content from the DB and store it in the Content object cDB
        cDB = csv.loadContent();
        // and overwrite the actual content of the GIS 
        gis.setContent(cDB);
    }

    /**
     * This method is called when connect button is pressed
     * @return true when the method is successful and false when it is not successful
     * @throws SQLException -
     */
    public Connection getConnection () throws SQLException {
        db = new Database();
        db.dbHost = host_textfield.getText();
        db.dbPort = port_textfield.getText();
        db.dbName = dbname_textfield.getText();
        db.dbUser = user_textfield.getText();
        db.dbPassword = password_textfield.getText();
        db.DBMS = (String) DBMSName.getText();
        
        return db.dbConnect();
    }  

    /**
     * This methods creates a table in the database if none exists
     * The table name is "shapes" and it has 3 columns: "gid", "type" and "geom";
     * The columns are compulsory attributes for each drawn shape. 
     * @throws Exception -
     */
    public void createTable() throws Exception {
        Connection con = getConnection();
        PreparedStatement create = con.prepareStatement("CREATE TABLE IF NOT EXISTS shapes (gid int NOT NULL AUTO_INCREMENT, "
                + "type varchar(10), "
                + "geom longtext, "
                + "PRIMARY KEY(gid))");
        create.executeUpdate();
    }

    /**
     * This method opens a filechooser dialog box;
     * The file chooser validates that the selected file is a .csv, 
     * if true a file name and file path are displayed in the appropriate text-boxes;
     * if false an error message is displayed.
     * an error message is also displayed if there is no file selected.
     * @throws Exception -
     */

    public void fileChooser() throws Exception {
            JFileChooser chooser = new JFileChooser();
            int fc = chooser.showOpenDialog(null);
            while(fc ==JFileChooser.APPROVE_OPTION && !chooser.getSelectedFile().getName().endsWith(".csv")){
                      JOptionPane.showMessageDialog(null, "The file "+ chooser.getSelectedFile() + 
                              " is not a csv file.","Open Error", JOptionPane.ERROR_MESSAGE);
            fc = chooser.showOpenDialog(this);
            }
            
            if (fc ==JFileChooser.APPROVE_OPTION) {
                File f = chooser.getSelectedFile();
                String filepath = f.getAbsolutePath();
                path_txt.setText(filepath);
                String filename = f.getName();
                name_txt.setText(filename);
            }
            
            else {
                JOptionPane.showMessageDialog(null, "No Selection");
            }
    }
    
    /**
     * This method creates an object of type createfile;
     * it saves the contents of GIS.drawing.Content into a csv file.
     * @throws Exception -
     */
    public void saveToCsv() throws Exception {
        String filepath  = path_txt.getText();
        String filename = name_txt.getText();
        createfile g = new createfile();
        g.openFile();
        g.addRecords(filepath);
        g.closeFile();
        JOptionPane.showMessageDialog(null,"Saved to file: " +filename);
    }
    
    /**
     * This method deletes all the entries of the database table by sending a prepared statement to the MySQL database;
     * It creates a connection first.
     * @throws Exception -
     */
    public void deleteAllEntries() throws Exception {
        Connection con = getConnection();
        PreparedStatement deleteAll = con.prepareStatement("TRUNCATE shapes"); 
        deleteAll.executeUpdate();
    }
      
    /**
     * Create a file object
     */
    public class createfile {
       private Formatter file;

        /**
         * This methods opens the csv file in the specified file path.
         */
        public void openFile() {
           try {
               String filepath = path_txt.getText();
               file = new Formatter(filepath);
           }
           catch(FileNotFoundException e) {
               System.out.println("you have an error");
           }
        }
        
        /**
         * This method adds the individual lines of the Jtable into a csv file.
         * @param path the path selected by the user where the file should be stored
         * @return true if the process is successful and false if there is an error
         */
        public boolean addRecords(String path) {
            try {
                FileWriter csv = new FileWriter(new File(path));

                // header:
                csv.write("type;geom\n");

                String type;
                String geom;
                // insert all Points into the CSV
                for (GISPoint p : c.pointlist) {
                    type = p.getType();
                    geom = p.getGeometryAsText();
                    csv.write(type + ";" + geom + "\n");
                }

                // insert all Polylines into the CSV
                for (GISPolyline p : c.polylinelist) {
                    type = p.getType();
                    geom = p.getGeometryAsText();
                    csv.write(type + ";" + geom + "\n");
                }  

                // insert all Polygons into the CSV
                for (GISPolygon p : c.polygonlist) {
                    type = p.getType();
                    geom = p.getGeometryAsText();
                    csv.write(type + ";" + geom + "\n");
                }  
                
                csv.close();
                return true;
            }
                
        catch (IOException e) {
        }
        return false;
        }
    
        /**
         * This method closes the formatter once all formating is complete.
         */
        public void closeFile() {
            file.close();
        }
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Connect;
    private javax.swing.JTextField DBMSName;
    private javax.swing.JButton LoadInGis_DB_btn;
    private javax.swing.JButton clear_viewer_btn;
    private javax.swing.JLabel connected_label;
    private javax.swing.JTextField dbname_textfield;
    private javax.swing.JTable file_viewer;
    private javax.swing.JTextField host_textfield;
    private javax.swing.JButton import_db_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JLayeredPane jLayeredPane5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private javax.swing.JTextField name_txt;
    private javax.swing.JButton open_csv_btn;
    private javax.swing.JPasswordField password_textfield;
    private javax.swing.JTextField path_txt;
    private javax.swing.JTextField port_textfield;
    private javax.swing.JButton saveToCsv_btn;
    private javax.swing.JButton saveToDb_btn;
    private javax.swing.JTextField table_txt;
    private javax.swing.JTextField user_textfield;
    // End of variables declaration//GEN-END:variables
}
